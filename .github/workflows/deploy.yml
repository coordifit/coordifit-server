name: backend-deploy

on:
  push:
    branches: [chore/*, hotfix/*]
    paths:
      - "docker-compose.yml"
      - ".github/workflows/**"
      - "src/**"
      - "build.gradle*"
      - "settings.gradle*"
      - "gradle/**"
      - "Dockerfile"
  pull_request:
    branches: [dev]
    types: [closed]

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Gradle wrapper permission
        run: chmod +x ./gradlew

      - name: Run spotless only
        run: ./gradlew spotlessCheck

  build_and_push:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify prod properties exists
        run: |
          test -f src/main/resources/application-prod.properties && echo "✅ Prod properties found" || (echo "❌ Missing prod properties" && exit 1)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set tags
        id: meta
        run: echo "SHA_TAG=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/coordifit-spring:dev-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/coordifit-spring:${{ steps.meta.outputs.SHA_TAG }}

  deploy_to_ec2:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: SSH → pull & restart only spring-boot
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/app
            docker compose pull spring-boot
            docker compose up -d spring-boot
